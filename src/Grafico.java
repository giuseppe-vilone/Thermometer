import java.io.File;
import java.io.IOException;
import java.text.NumberFormat;

import javax.swing.JOptionPane;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.StandardXYItemLabelGenerator;
import org.jfree.chart.labels.XYItemLabelGenerator;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;


/**
 * This Class generates a graphic, starting by value of temperature
 * generated by chance into a delimited range by two value indicated by user 
 * @author Giuseppe Vilone
 *
 */
public class Grafico extends ApplicationFrame {

	/** 
	 * Constructor
	 * It collects data and plots the graph
	 * It saves the graph file into the execution directory.  
	 * @param title Title of graph
	 */
	public Grafico(final String title) {
		super(title);
		final XYDataset dataset = createDataset();
		final JFreeChart chart = createChart(dataset);
		final ChartPanel chartPanel = new ChartPanel(chart);
		chartPanel.setPreferredSize(new java.awt.Dimension(900, 470));
		setContentPane(chartPanel);
		try {
			ChartUtilities.saveChartAsPNG(new File("./chart.jpg"), chart, 1024, 768);
		}
		catch (IOException ex)
		{
			System.out.println(ex.getLocalizedMessage());
		}
	}

	/**
	 * This method builds up the dataset containing:
	 * 
	 * - temperature samples;
	 * - value to the superior limit representation;
	 * - value to the inferior limit representation.  
	 * 
	 * @return Temperature dataset.
	 */
	private XYDataset createDataset() 
	{
		XYSeriesCollection dataset = new XYSeriesCollection();		

		final XYSeries y = creaSerie("Enter Min Temperature");
		dataset.addSeries(y);

		final XYSeries m = creaSerie("Enter Max Temperature");
		dataset.addSeries(m);

		final XYSeries z = generaSerie("Corr", y, m);
		dataset.addSeries(z);

		return dataset;
	}


	/**
	 * It performs a sampling of temperature measurements
	 * into the range specified by the operator 
	 * @param Mre Measure title
	 * @param y Inferior limit series
	 * @param m Superior limit series
	 * @return Temperature measures
	 */
	private XYSeries generaSerie(String Mre, XYSeries y, XYSeries m) {
		
		int SUP = m.getY(0).intValue();
		int INF = y.getY(0).intValue();
		int RANGE = SUP - INF + 1;

		XYSeries Misure = new XYSeries(Mre);
		for (int j=1; j<=10;j++)
		{
			int z = (int)(RANGE*Math.random())+INF;
			Misure.add(j, z);				
			System.out.println("Measure ("+j+") = "+z);	
		}
		return Misure;
	}

	
	/**
	 * It builds up the values to the superior/inferior limit representation
	 * @param testo Input text label 
	 * @return Superior/inferior limit values
	 */
	private XYSeries creaSerie(String testo) 
	{		
		String numero = JOptionPane.showInputDialog(null, testo);
		int a = new Integer(numero);		
		XYSeries serie = new XYSeries(numero);		
		for (int j=1; j<=10;j++)		
		{							
			serie.add(j,a);				
		}
		return serie;				   
	}

	/**
	 * Method deputy to the chart creation.
	 * @param dataset The dataset created by the method CreateDataSet
	 * @return The graph
	 */
	private JFreeChart createChart(final XYDataset dataset) {
		final JFreeChart chart = ChartFactory.createXYLineChart("Graphic", "Label", "Values", dataset, PlotOrientation.VERTICAL, true, true, false);
		XYPlot plot = (XYPlot) chart.getPlot();
		
		XYLineAndShapeRenderer renderer =  new XYLineAndShapeRenderer(true, true);
		plot.setRenderer(renderer);
		renderer.setBaseShapesVisible(true);
		renderer.setBaseShapesFilled(true);
		
		NumberFormat format = NumberFormat.getNumberInstance();
		format.setMaximumFractionDigits(2);
		
		XYItemLabelGenerator generator = new StandardXYItemLabelGenerator(StandardXYItemLabelGenerator.DEFAULT_ITEM_LABEL_FORMAT, format, format);
		renderer.setBaseItemLabelGenerator(generator);		
		renderer.setBaseItemLabelsVisible(true);
		
		return chart;
	}

	
	public static void main(final String[] args) { 
		final Grafico demo = new Grafico("Graphic");
		demo.pack();
		RefineryUtilities.centerFrameOnScreen(demo);
		demo.setVisible(true); 
	} 
}



